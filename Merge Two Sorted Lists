/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {

        ListNode* returnedList = nullptr;
        ListNode* returnedListTail = returnedList;
        //handle the case if one list == null .
        if(l1 == nullptr)
            return l2;
        if(l2 == nullptr)
            return l1;
    while(l2 != nullptr || l1 != nullptr){
        if(l1->val < l2->val){
            if(returnedList == nullptr){
                 returnedList = l1; 
                returnedListTail = l1;
                l1 = l1->next;
            }
            else{
                returnedListTail->next = l1;
                returnedListTail = returnedListTail->next;             
                l1 = l1->next;
            }
        }
        else if(l1->val > l2->val){
             if(returnedList == nullptr){
                 returnedList = l2; 
                returnedListTail = l2;
                l2 = l2->next;
            }
            else{
                returnedListTail->next = l2;
                returnedListTail = returnedListTail->next;             
                l2 = l2->next;
            }
        }
        else if(l1->val == l2->val){
            if(returnedList == nullptr){
                returnedList = l1; 
                returnedListTail = l1;
                l1 = l1->next;
                returnedListTail -> next = l2;
                returnedListTail = returnedListTail->next;
                l2 = l2->next;
            }
            else{
                returnedListTail->next = l1;
                returnedListTail = returnedListTail->next;
                l1 = l1->next;
                returnedListTail->next = l2;
                returnedListTail = returnedListTail->next;
                l2 = l2->next;
            }
        }
        if(l1 == nullptr && l2 != nullptr){
            returnedListTail->next = l2;
            l2 = nullptr;
        }
        if(l1 != nullptr && l2 == nullptr){
            returnedListTail->next = l1;
            l1 = nullptr;
        }
        }
        
    return returnedList;
    }
};
